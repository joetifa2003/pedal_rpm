// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Bike.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Bike TABLE
class TableBike extends SqfEntityTableBase {
  TableBike() {
    // declare properties of EntityTable
    tableName = 'bike';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('tire', DbType.real, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBike();
  }
}

// Gear TABLE
class TableGear extends SqfEntityTableBase {
  TableGear() {
    // declare properties of EntityTable
    tableName = 'gear';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableBike.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'bike_id',
          isNotNull: false),
      SqfEntityFieldBase('gear', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('teath', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('type', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableGear();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class DBModel extends SqfEntityModelProvider {
  DBModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    databaseTables = [
      TableBike.getInstance,
      TableGear.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Bike
class Bike {
  Bike({this.id, this.name, this.tire}) {
    _setDefaultValues();
  }
  Bike.withFields(this.name, this.tire) {
    _setDefaultValues();
  }
  Bike.withId(this.id, this.name, this.tire) {
    _setDefaultValues();
  }
  Bike.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['tire'] != null) {
      tire = double.tryParse(o['tire'].toString());
    }
  }
  // FIELDS (Bike)
  int id;
  String name;
  double tire;

  BoolResult saveResult;
  // end FIELDS (Bike)

// COLLECTIONS & VIRTUALS (Bike)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plGears', 'plField2'..]) or so on..
  List<Gear> plGears;

  /// get Gear(s) filtered by id=bike_id
  GearFilterBuilder getGears(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Gear()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .bike_id
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Bike)

  static const bool _softDeleteActivated = false;
  BikeManager __mnBike;

  BikeManager get _mnBike {
    return __mnBike = __mnBike ?? BikeManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (tire != null) {
      map['tire'] = tire;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (tire != null) {
      map['tire'] = tire;
    }

// COLLECTIONS (Bike)
    if (!forQuery) {
      map['Gears'] = await getGears().toMapList();
    }
// END COLLECTIONS (Bike)

    return map;
  }

  /// This method returns Json String [Bike]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Bike]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, tire];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, tire];
  }

  static Future<List<Bike>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Bike.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Bike>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Bike>[];
    try {
      objList = list
          .map((bike) => Bike.fromMap(bike as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Bike.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Bike>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Bike> objList = <Bike>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Bike.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bike.plGears') && */ (preloadFields ==
                null ||
            preloadFields.contains('plGears'))) {
          /*_loadedFields.add('bike.plGears'); */
          obj.plGears = obj.plGears ??
              await obj.getGears().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Bike by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Bike if exist, otherwise returns null
  Future<Bike> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Bike obj;
    final data = await _mnBike.getById([id]);
    if (data.length != 0) {
      obj = Bike.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bike.plGears') && */ (preloadFields ==
                null ||
            preloadFields.contains('plGears'))) {
          /*_loadedFields.add('bike.plGears'); */
          obj.plGears = obj.plGears ??
              await obj.getGears().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Bike) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnBike.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBike.update(this);
    }

    return id;
  }

  /// saveAs Bike. Returns a new Primary Key value of Bike

  /// <returns>Returns a new Primary Key value of Bike
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Bike> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Bike> bikes) async {
    // final results = _mnBike.saveAll('INSERT OR REPLACE INTO bike (id,name, tire)  VALUES (?,?,?)',bikes);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DBModel().batchStart();
    for (final obj in bikes) {
      await obj.save();
    }
    //    return DBModel().batchCommit();
    final result = await DBModel().batchCommit();
    for (int i = 0; i < bikes.length; i++) {
      if (bikes[i].id == null) {
        bikes[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnBike.rawInsert(
              'INSERT OR REPLACE INTO bike (id,name, tire)  VALUES (?,?,?)',
              [id, name, tire]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Bike id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Bike id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Bike Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Bike>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Bike> bikes) async {
    final results = await _mnBike.rawInsertAll(
        'INSERT OR REPLACE INTO bike (id,name, tire)  VALUES (?,?,?)', bikes);
    return results;
  }

  /// Deletes Bike

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Bike invoked (id=$id)');
    var result = BoolResult();
    {
      result = await Gear().select().bike_id.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnBike
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBike.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  BikeFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return BikeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  BikeFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BikeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion bike

// region BikeField
class BikeField extends SearchCriteria {
  BikeField(this.bikeFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  BikeFilterBuilder bikeFB;

  BikeField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  BikeFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    bikeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bikeFB.parameters, param, SqlSyntax.EQuals,
            bikeFB._addedBlocks)
        : setCriteria(pValue, bikeFB.parameters, param, SqlSyntax.NotEQuals,
            bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    bikeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bikeFB.parameters, param, SqlSyntax.EQualsOrNull,
            bikeFB._addedBlocks)
        : setCriteria(pValue, bikeFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder isNull() {
    bikeFB._addedBlocks = setCriteria(
        0,
        bikeFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      bikeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          bikeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bikeFB._addedBlocks);
      _waitingNot = '';
      bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
          bikeFB._addedBlocks.retVal;
    }
    return bikeFB;
  }

  BikeFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      bikeFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          bikeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bikeFB._addedBlocks);
      _waitingNot = '';
      bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
          bikeFB._addedBlocks.retVal;
      bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
          bikeFB._addedBlocks.retVal;
    }
    return bikeFB;
  }

  BikeFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      bikeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          bikeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bikeFB._addedBlocks);
      _waitingNot = '';
      bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
          bikeFB._addedBlocks.retVal;
    }
    return bikeFB;
  }

  BikeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      bikeFB._addedBlocks = setCriteria(
          pFirst,
          bikeFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bikeFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        bikeFB._addedBlocks = setCriteria(pFirst, bikeFB.parameters, param,
            SqlSyntax.LessThan, bikeFB._addedBlocks);
      } else {
        bikeFB._addedBlocks = setCriteria(pFirst, bikeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bikeFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        bikeFB._addedBlocks = setCriteria(pLast, bikeFB.parameters, param,
            SqlSyntax.GreaterThan, bikeFB._addedBlocks);
      } else {
        bikeFB._addedBlocks = setCriteria(pLast, bikeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bikeFB._addedBlocks);
      }
    }
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    bikeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bikeFB.parameters, param, SqlSyntax.GreaterThan,
            bikeFB._addedBlocks)
        : setCriteria(pValue, bikeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    bikeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bikeFB.parameters, param, SqlSyntax.LessThan,
            bikeFB._addedBlocks)
        : setCriteria(pValue, bikeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    bikeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bikeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bikeFB._addedBlocks)
        : setCriteria(pValue, bikeFB.parameters, param, SqlSyntax.LessThan,
            bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    bikeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bikeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bikeFB._addedBlocks)
        : setCriteria(pValue, bikeFB.parameters, param, SqlSyntax.GreaterThan,
            bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }

  BikeFilterBuilder inValues(dynamic pValue) {
    bikeFB._addedBlocks = setCriteria(
        pValue,
        bikeFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bikeFB._addedBlocks);
    _waitingNot = '';
    bikeFB._addedBlocks.needEndBlock[bikeFB._blockIndex] =
        bikeFB._addedBlocks.retVal;
    return bikeFB;
  }
}
// endregion BikeField

// region BikeFilterBuilder
class BikeFilterBuilder extends SearchCriteria {
  BikeFilterBuilder(Bike obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Bike _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  BikeFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  BikeFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  BikeFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  BikeFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  BikeFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  BikeFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  BikeFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BikeFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BikeFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BikeFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BikeFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  BikeField setField(BikeField field, String colName, DbType dbtype) {
    return BikeField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  BikeField _id;
  BikeField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  BikeField _name;
  BikeField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  BikeField _tire;
  BikeField get tire {
    return _tire = setField(_tire, 'tire', DbType.real);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Bike._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Bike> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Delete sub records where in (Gear) according to DeleteRule.CASCADE
    final idListGearBYbike_id = toListPrimaryKeySQL(false);
    final resGearBYbike_id = await Gear()
        .select()
        .where('bike_id IN (${idListGearBYbike_id['sql']})',
            parameterValue: idListGearBYbike_id['args'])
        .delete(hardDelete);
    if (!resGearBYbike_id.success) {
      return resGearBYbike_id;
    }

    if (Bike._softDeleteActivated && !hardDelete) {
      r = await _obj._mnBike.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnBike.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from bike ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnBike.updateBatch(qparams, values);
  }

  /// This method always returns Bike Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Bike>
  Future<Bike> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnBike.toList(qparams);
    final data = await objFuture;
    Bike obj;
    if (data.isNotEmpty) {
      obj = Bike.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bike.plGears') && */ (preloadFields ==
                null ||
            preloadFields.contains('plGears'))) {
          /*_loadedFields.add('bike.plGears'); */
          obj.plGears = obj.plGears ??
              await obj.getGears().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Bike]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) bikeCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final bikesFuture = await _obj._mnBike.toList(qparams);
    final int count = bikesFuture[0]['CNT'] as int;
    if (bikeCount != null) {
      bikeCount(count);
    }
    return count;
  }

  /// This method returns List<Bike> [Bike]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Bike>
  Future<List<Bike>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Bike> bikesData = await Bike.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return bikesData;
  }

  /// This method returns Json String [Bike]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Bike]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Bike]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnBike.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Bike]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM bike WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnBike.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Bike]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnBike.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Bike.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnBike.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BikeFilterBuilder

// region BikeFields
class BikeFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fTire;
  static TableField get tire {
    return _fTire = _fTire ?? SqlSyntax.setField(_fTire, 'tire', DbType.real);
  }
}
// endregion BikeFields

//region BikeManager
class BikeManager extends SqfEntityProvider {
  BikeManager()
      : super(DBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'bike';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion BikeManager
// region Gear
class Gear {
  Gear({this.id, this.bike_id, this.gear, this.teath, this.type}) {
    _setDefaultValues();
  }
  Gear.withFields(this.bike_id, this.gear, this.teath, this.type) {
    _setDefaultValues();
  }
  Gear.withId(this.id, this.bike_id, this.gear, this.teath, this.type) {
    _setDefaultValues();
  }
  Gear.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    bike_id = int.tryParse(o['bike_id'].toString());

    if (o['gear'] != null) {
      gear = int.tryParse(o['gear'].toString());
    }
    if (o['teath'] != null) {
      teath = int.tryParse(o['teath'].toString());
    }
    if (o['type'] != null) {
      type = o['type'] as String;
    }

    // RELATIONSHIPS FromMAP
    plBike = o['bike'] != null
        ? Bike.fromMap(o['bike'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Gear)
  int id;
  int bike_id;
  int gear;
  int teath;
  String type;

  BoolResult saveResult;
  // end FIELDS (Gear)

// RELATIONSHIPS (Gear)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plBike', 'plField2'..]) or so on..
  Bike plBike;

  /// get Bike By Bike_id
  Future<Bike> getBike(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Bike()
        .getById(bike_id, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Gear)

  static const bool _softDeleteActivated = false;
  GearManager __mnGear;

  GearManager get _mnGear {
    return __mnGear = __mnGear ?? GearManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (bike_id != null) {
      map['bike_id'] = forView ? plBike.name : bike_id;
    }

    if (gear != null) {
      map['gear'] = gear;
    }

    if (teath != null) {
      map['teath'] = teath;
    }

    if (type != null) {
      map['type'] = type;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (bike_id != null) {
      map['bike_id'] = forView ? plBike.name : bike_id;
    }

    if (gear != null) {
      map['gear'] = gear;
    }

    if (teath != null) {
      map['teath'] = teath;
    }

    if (type != null) {
      map['type'] = type;
    }

    return map;
  }

  /// This method returns Json String [Gear]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Gear]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [bike_id, gear, teath, type];
  }

  List<dynamic> toArgsWithIds() {
    return [id, bike_id, gear, teath, type];
  }

  static Future<List<Gear>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Gear.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Gear>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Gear>[];
    try {
      objList = list
          .map((gear) => Gear.fromMap(gear as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Gear.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Gear>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Gear> objList = <Gear>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Gear.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bike.plBike') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBike'))) {
          /*_loadedFields.add('bike.plBike');*/
          obj.plBike = obj.plBike ??
              await obj.getBike(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Gear by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Gear if exist, otherwise returns null
  Future<Gear> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Gear obj;
    final data = await _mnGear.getById([id]);
    if (data.length != 0) {
      obj = Gear.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bike.plBike') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBike'))) {
          /*_loadedFields.add('bike.plBike');*/
          obj.plBike = obj.plBike ??
              await obj.getBike(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Gear) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnGear.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnGear.update(this);
    }

    return id;
  }

  /// saveAs Gear. Returns a new Primary Key value of Gear

  /// <returns>Returns a new Primary Key value of Gear
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Gear> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Gear> gears) async {
    // final results = _mnGear.saveAll('INSERT OR REPLACE INTO gear (id,bike_id, gear, teath, type)  VALUES (?,?,?,?,?)',gears);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DBModel().batchStart();
    for (final obj in gears) {
      await obj.save();
    }
    //    return DBModel().batchCommit();
    final result = await DBModel().batchCommit();
    for (int i = 0; i < gears.length; i++) {
      if (gears[i].id == null) {
        gears[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnGear.rawInsert(
              'INSERT OR REPLACE INTO gear (id,bike_id, gear, teath, type)  VALUES (?,?,?,?,?)',
              [id, bike_id, gear, teath, type]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Gear id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Gear id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Gear Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Gear>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Gear> gears) async {
    final results = await _mnGear.rawInsertAll(
        'INSERT OR REPLACE INTO gear (id,bike_id, gear, teath, type)  VALUES (?,?,?,?,?)',
        gears);
    return results;
  }

  /// Deletes Gear

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Gear invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnGear
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnGear.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  GearFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return GearFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  GearFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return GearFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion gear

// region GearField
class GearField extends SearchCriteria {
  GearField(this.gearFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  GearFilterBuilder gearFB;

  GearField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  GearFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    gearFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, gearFB.parameters, param, SqlSyntax.EQuals,
            gearFB._addedBlocks)
        : setCriteria(pValue, gearFB.parameters, param, SqlSyntax.NotEQuals,
            gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    gearFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, gearFB.parameters, param, SqlSyntax.EQualsOrNull,
            gearFB._addedBlocks)
        : setCriteria(pValue, gearFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder isNull() {
    gearFB._addedBlocks = setCriteria(
        0,
        gearFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      gearFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          gearFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          gearFB._addedBlocks);
      _waitingNot = '';
      gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
          gearFB._addedBlocks.retVal;
    }
    return gearFB;
  }

  GearFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      gearFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          gearFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          gearFB._addedBlocks);
      _waitingNot = '';
      gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
          gearFB._addedBlocks.retVal;
      gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
          gearFB._addedBlocks.retVal;
    }
    return gearFB;
  }

  GearFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      gearFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          gearFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          gearFB._addedBlocks);
      _waitingNot = '';
      gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
          gearFB._addedBlocks.retVal;
    }
    return gearFB;
  }

  GearFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      gearFB._addedBlocks = setCriteria(
          pFirst,
          gearFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          gearFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        gearFB._addedBlocks = setCriteria(pFirst, gearFB.parameters, param,
            SqlSyntax.LessThan, gearFB._addedBlocks);
      } else {
        gearFB._addedBlocks = setCriteria(pFirst, gearFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, gearFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        gearFB._addedBlocks = setCriteria(pLast, gearFB.parameters, param,
            SqlSyntax.GreaterThan, gearFB._addedBlocks);
      } else {
        gearFB._addedBlocks = setCriteria(pLast, gearFB.parameters, param,
            SqlSyntax.LessThanOrEquals, gearFB._addedBlocks);
      }
    }
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    gearFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, gearFB.parameters, param, SqlSyntax.GreaterThan,
            gearFB._addedBlocks)
        : setCriteria(pValue, gearFB.parameters, param,
            SqlSyntax.LessThanOrEquals, gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    gearFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, gearFB.parameters, param, SqlSyntax.LessThan,
            gearFB._addedBlocks)
        : setCriteria(pValue, gearFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    gearFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, gearFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, gearFB._addedBlocks)
        : setCriteria(pValue, gearFB.parameters, param, SqlSyntax.LessThan,
            gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    gearFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, gearFB.parameters, param,
            SqlSyntax.LessThanOrEquals, gearFB._addedBlocks)
        : setCriteria(pValue, gearFB.parameters, param, SqlSyntax.GreaterThan,
            gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }

  GearFilterBuilder inValues(dynamic pValue) {
    gearFB._addedBlocks = setCriteria(
        pValue,
        gearFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        gearFB._addedBlocks);
    _waitingNot = '';
    gearFB._addedBlocks.needEndBlock[gearFB._blockIndex] =
        gearFB._addedBlocks.retVal;
    return gearFB;
  }
}
// endregion GearField

// region GearFilterBuilder
class GearFilterBuilder extends SearchCriteria {
  GearFilterBuilder(Gear obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Gear _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  GearFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  GearFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  GearFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  GearFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  GearFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  GearFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  GearFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  GearFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  GearFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  GearFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  GearFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  GearField setField(GearField field, String colName, DbType dbtype) {
    return GearField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  GearField _id;
  GearField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  GearField _bike_id;
  GearField get bike_id {
    return _bike_id = setField(_bike_id, 'bike_id', DbType.integer);
  }

  GearField _gear;
  GearField get gear {
    return _gear = setField(_gear, 'gear', DbType.integer);
  }

  GearField _teath;
  GearField get teath {
    return _teath = setField(_teath, 'teath', DbType.integer);
  }

  GearField _type;
  GearField get type {
    return _type = setField(_type, 'type', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Gear._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Gear> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Gear._softDeleteActivated && !hardDelete) {
      r = await _obj._mnGear.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnGear.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from gear ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnGear.updateBatch(qparams, values);
  }

  /// This method always returns Gear Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Gear>
  Future<Gear> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnGear.toList(qparams);
    final data = await objFuture;
    Gear obj;
    if (data.isNotEmpty) {
      obj = Gear.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bike.plBike') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBike'))) {
          /*_loadedFields.add('bike.plBike');*/
          obj.plBike = obj.plBike ??
              await obj.getBike(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Gear]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) gearCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final gearsFuture = await _obj._mnGear.toList(qparams);
    final int count = gearsFuture[0]['CNT'] as int;
    if (gearCount != null) {
      gearCount(count);
    }
    return count;
  }

  /// This method returns List<Gear> [Gear]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Gear>
  Future<List<Gear>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Gear> gearsData = await Gear.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return gearsData;
  }

  /// This method returns Json String [Gear]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Gear]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Gear]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnGear.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Gear]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM gear WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnGear.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Gear]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnGear.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Gear.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnGear.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion GearFilterBuilder

// region GearFields
class GearFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fBike_id;
  static TableField get bike_id {
    return _fBike_id =
        _fBike_id ?? SqlSyntax.setField(_fBike_id, 'bike_id', DbType.integer);
  }

  static TableField _fGear;
  static TableField get gear {
    return _fGear =
        _fGear ?? SqlSyntax.setField(_fGear, 'gear', DbType.integer);
  }

  static TableField _fTeath;
  static TableField get teath {
    return _fTeath =
        _fTeath ?? SqlSyntax.setField(_fTeath, 'teath', DbType.integer);
  }

  static TableField _fType;
  static TableField get type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'type', DbType.text);
  }
}
// endregion GearFields

//region GearManager
class GearManager extends SqfEntityProvider {
  GearManager()
      : super(DBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'gear';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion GearManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o) nextval]) async {
    final val = await DBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o) currentval]) async {
    final val = await DBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o) currentval]) async {
    final val = await DBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class DBModelSequenceManager extends SqfEntityProvider {
  DBModelSequenceManager() : super(DBModel());
}
// END OF ENTITIES
